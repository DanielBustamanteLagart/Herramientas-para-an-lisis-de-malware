import pefile
pe=pefile.PE('archivos_subidos/D2L-Desktop.exe')
#pe.print_info() # Prints all Headers in a human readable format

#print("e_magic : " + hex(pe.DOS_HEADER.e_magic)) # Prints the e_magic field of the DOS_HEADER

#print("e_lfnew : " + hex(pe.DOS_HEADER.e_lfanew)) # Prints the e_lfnew field of the DOS_HEADER
# Acceder a algunas propiedades específicas del archivo PE
print("e_magic:", hex(pe.DOS_HEADER.e_magic))
print("e_cblp:", hex(pe.DOS_HEADER.e_cblp))
print("e_cp:", hex(pe.DOS_HEADER.e_cp))
print("e_crlc:", hex(pe.DOS_HEADER.e_crlc))
print("e_cparhdr:", hex(pe.DOS_HEADER.e_cparhdr))
print("e_minalloc:", hex(pe.DOS_HEADER.e_minalloc))
print("e_maxalloc:", hex(pe.DOS_HEADER.e_maxalloc))
print("e_ss:", hex(pe.DOS_HEADER.e_ss))
print("e_sp:", hex(pe.DOS_HEADER.e_sp))
print("e_csum:", hex(pe.DOS_HEADER.e_csum))
print("e_ip:", hex(pe.DOS_HEADER.e_ip))
print("e_cs:", hex(pe.DOS_HEADER.e_cs))
print("e_lfarlc:", hex(pe.DOS_HEADER.e_lfarlc))
print("e_ovno:", hex(pe.DOS_HEADER.e_ovno))
print("e_oemid:", hex(pe.DOS_HEADER.e_oemid))
print("e_oeminfo:", hex(pe.DOS_HEADER.e_oeminfo))
print("e_lfanew:", hex(pe.DOS_HEADER.e_lfanew))

#Información de encabezados del archivo
print("Machine:", hex(pe.FILE_HEADER.Machine))
print("NumberOfSections:", hex(pe.FILE_HEADER.NumberOfSections))
print("TimeDateStamp:", hex(pe.FILE_HEADER.TimeDateStamp))
print("PointerToSymbolTable:", hex(pe.FILE_HEADER.PointerToSymbolTable))
print("NumberOfSymbols:", hex(pe.FILE_HEADER.NumberOfSymbols))
print("SizeOfOptionalHeader:", hex(pe.FILE_HEADER.SizeOfOptionalHeader))
print("Characteristics:", hex(pe.FILE_HEADER.Characteristics))

#Información ipcional del encabezado del archivo
print("Magic:", hex(pe.OPTIONAL_HEADER.Magic))
print("MajorLinkerVersion:", hex(pe.OPTIONAL_HEADER.MajorLinkerVersion))
print("MinorLinkerVersion:", hex(pe.OPTIONAL_HEADER.MinorLinkerVersion))
print("SizeOfCode:", hex(pe.OPTIONAL_HEADER.SizeOfCode))
print("SizeOfInitializedData:", hex(pe.OPTIONAL_HEADER.SizeOfInitializedData))
print("SizeOfUninitializedData:", hex(pe.OPTIONAL_HEADER.SizeOfUninitializedData))
print("AddressOfEntryPoint:", hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
print("BaseOfCode:", hex(pe.OPTIONAL_HEADER.BaseOfCode))
print("ImageBase:", hex(pe.OPTIONAL_HEADER.ImageBase))
print("SectionAlignment:", hex(pe.OPTIONAL_HEADER.SectionAlignment))
print("FileAlignment:", hex(pe.OPTIONAL_HEADER.FileAlignment))
print("MajorOperatingSystemVersion:", hex(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion))
print("MinorOperatingSystemVersion:", hex(pe.OPTIONAL_HEADER.MinorOperatingSystemVersion))
print("MajorImageVersion:", hex(pe.OPTIONAL_HEADER.MajorImageVersion))
print("MinorImageVersion:", hex(pe.OPTIONAL_HEADER.MinorImageVersion))
print("MajorSubsystemVersion:", hex(pe.OPTIONAL_HEADER.MajorSubsystemVersion))
print("MinorSubsystemVersion:", hex(pe.OPTIONAL_HEADER.MinorSubsystemVersion))
print("SizeOfHeaders:", hex(pe.OPTIONAL_HEADER.SizeOfHeaders))
print("CheckSum:", hex(pe.OPTIONAL_HEADER.CheckSum))
print("SizeOfImage:", hex(pe.OPTIONAL_HEADER.SizeOfImage))
print("Subsystem:", hex(pe.OPTIONAL_HEADER.Subsystem))
print("DllCharacteristics:", hex(pe.OPTIONAL_HEADER.DllCharacteristics))
print("SizeOfStackReserve:", hex(pe.OPTIONAL_HEADER.SizeOfStackReserve))
print("SizeOfStackCommit:", hex(pe.OPTIONAL_HEADER.SizeOfStackCommit))
print("SizeOfHeapReserve:", hex(pe.OPTIONAL_HEADER.SizeOfHeapReserve))
print("SizeOfHeapCommit:", hex(pe.OPTIONAL_HEADER.SizeOfHeapCommit))
print("LoaderFlags:", hex(pe.OPTIONAL_HEADER.LoaderFlags))
print("NumberOfRvaAndSizes:", hex(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))


#SectionMaxEntropy	SectionMaxRawsize	SectionMaxVirtualsize	SectionMaxVirtual (adress)	SectionMaxPointerData
#Campos section
for section in pe.sections:
    print("Section Name:", section.Name.decode().strip('\x00'))
    print("   SectionMaxVirtualsize:", hex(section.Misc_VirtualSize))
    print("   SectionMaxVirtual:", hex(section.VirtualAddress))
    print("   SectionMaxRawsize:", hex(section.SizeOfRawData))
    print("   SectionMaxEntropy:", hex(int(section.get_entropy()))) 
    print("   SectionMaxPointerData:", hex(section.PointerToRawData))
    # Añade más propiedades según tus necesidades...

#DirectoryEntryImport	DirectoryEntryImportSize	DirectoryEntryExport
#Campos Directory
# Acceder a información de las entradas de directorios
print("DirectoryEntryImport:", hex(pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress))
print("DirectoryEntryImportSize:", hex(pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].Size))
print("DirectoryEntryExport:", hex(pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_EXPORT']].VirtualAddress))


