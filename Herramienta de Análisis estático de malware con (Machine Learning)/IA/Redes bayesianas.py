# Importación de Librerías
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.mixture import BayesianGaussianMixture
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import warnings
warnings.simplefilter('ignore')

# Leer el Archivo con los Datos del Malware
df = pd.read_csv('dataset_malwares.csv')

# Eliminar Columnas no Deseadas
dropped_df = df.drop(['Name', 'Machine', 'TimeDateStamp', 'Malware'], axis=1)

# Visualizar la Distribución de Clases
ax = sns.countplot(df['Malware'])
ax.set_xticks([0, 1])
ax.set_xticklabels(['Not Malware', 'Malware'])
#plt.show()

# Preparar Conjuntos de Entrenamiento y Pruebas
X = dropped_df
y = df['Malware']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print("Number of used features:", X_train.shape[1])

# Inicializar el Clasificador de Redes Bayesianas
clf = BayesianGaussianMixture(
    n_components=2,        # Número de componentes (clases)
    max_iter=500,          # Número máximo de iteraciones
    random_state=0,        # Semilla para reproducibilidad
    weight_concentration_prior_type="dirichlet_process"  # Tipo de prior para la concentración de pesos
)

# Ajustar el clasificador a los datos de entrenamiento
clf.fit(X_train)

# Predecir en el conjunto de prueba
y_pred = clf.predict(X_test)

# Imprimir Informe de Clasificación
print(classification_report(y_test, y_pred, target_names=['Not Malware', 'Malware']))

# Generar y Visualizar Matriz de Confusión
matrix = confusion_matrix(y_test, y_pred)
ax = sns.heatmap(matrix, annot=True, fmt="d", cmap='Blues', cbar=False, xticklabels=['Not Malware', 'Malware'], yticklabels=['Not Malware', 'Malware'])
ax.set_xlabel('Predicted Labels')
ax.set_ylabel('True Labels')

# No hay una función directa para obtener la importancia en las Redes Bayesianas como en los Bosques Aleatorios
# Puedes explorar otras métricas o visualizaciones específicas para evaluar la relevancia de las características.

plt.show()
